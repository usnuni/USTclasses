{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "218fd05e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import sys\n",
    "from enum import Enum\n",
    "\n",
    "window_size = (640, 480)\n",
    "polygon_close_with_same_point_click = True \n",
    "\n",
    "def on_mouse(event, x, y, flags, param):\n",
    "\n",
    "\n",
    "    global points, left_m, right_m, draw_on, bg, H, W\n",
    "\n",
    "    \n",
    "    if event == cv2.EVENT_LBUTTONDOWN and draw_on: \n",
    "        points.append((x,y))\n",
    "        left_m.append((x**2,x*y,y**2,x,y,1))\n",
    "\n",
    "\n",
    "    elif event == cv2.EVENT_LBUTTONUP and draw_on: # 점 입력 (좌클릭)\n",
    "        cv2.line(bg, points[-1], points[-1], (np.random.randint(0,256),np.random.randint(0,256),np.random.randint(0,256)), 5, cv2.LINE_AA)  \n",
    "        cv2.putText(bg, f\"{chr(64+len(points))}'({x},{y})\", (x-10,y-10), cv2.FONT_HERSHEY_PLAIN, 1.0, (255,255,255), 1, cv2.LINE_AA)\n",
    "        cv2.imshow('polygon', bg)\n",
    "\n",
    "    elif event == cv2.EVENT_RBUTTONDOWN :  # 입력 마침 (우클릭)\n",
    "        if len(left_m) >= 3 :\n",
    "            l_m = np.array(left_m)\n",
    "            U,s,Vt = np.linalg.svd(l_m, full_matrices=True)\n",
    "            print(f\"특이값 : {s}\")\n",
    "            print(f\"우측 특이벡터 : {Vt}\")\n",
    "            result = Vt[-1] \n",
    "            a,b,c,d,e,f = result\n",
    "            print(f\"A*x = {l_m@result}\")\n",
    "\n",
    "            center_x = (2*c*d-b*e) / (b**2-4*a*c)\n",
    "            center_y = (2*a*e-b*d) / (b**2-4*a*c)\n",
    "\n",
    "            theta = np.arctan2(b, a-c)/2 # angle\n",
    "\n",
    "            e1 = a*np.cos(theta)**2 + b*np.cos(theta)*np.sin(theta) + c*np.sin(theta)**2\n",
    "            e2 = a*np.sin(theta)**2 - b*np.cos(theta)*np.sin(theta) + c*np.cos(theta)**2\n",
    "\n",
    "            scale_inv = (a*center_x**2 + b*center_x*center_y + c*center_y**2) - f\n",
    "\n",
    "            l_length = scale_inv/e1\n",
    "            s_length = scale_inv/e2\n",
    "            if l_length > 0 and s_length > 0 : \n",
    "                l_length = np.sqrt(l_length)\n",
    "                s_length = np.sqrt(s_length)\n",
    "                center_x, center_y, theta, l_length, s_length = int(center_x), int(center_y), int(theta* 180 / np.pi), int(l_length), int(s_length)\n",
    "                cv2.ellipse(bg, (center_x, center_y), (l_length, s_length), theta, 0, 360, (0,255,255), 1)\n",
    "\n",
    "                cv2.imshow('polygon', bg)\n",
    " \n",
    "            draw_on = False\n",
    "\n",
    "    elif event == cv2.EVENT_RBUTTONDBLCLK : # 초기화 (더블클릭)\n",
    "        draw_on = True\n",
    "        points = []\n",
    "        left_m = []\n",
    "        right_m = []\n",
    "        bg = np.ones((H, W, 3), dtype=np.uint8) * 0\n",
    "        cv2.imshow('polygon', bg)\n",
    "    \n",
    "\n",
    "draw_on = True\n",
    "points = []\n",
    "left_m = []\n",
    "right_m = []\n",
    "\n",
    "\n",
    "cv2.namedWindow('polygon')\n",
    "cv2.setMouseCallback('polygon', on_mouse, bg)\n",
    "\n",
    "cv2.imshow('polygon', bg)\n",
    "cv2.waitKey()\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
